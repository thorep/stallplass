generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model base_prices {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  price       Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model box_amenities {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime            @default(now())
  name              String              @unique
  updatedAt         DateTime            @default(now())
  box_amenity_links box_amenity_links[]
}

model box_amenity_links {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  boxId         String
  amenityId     String
  createdAt     DateTime      @default(now())
  box_amenities box_amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  boxes         boxes         @relation(fields: [boxId], references: [id], onDelete: Cascade)

  @@unique([boxId, amenityId])
}

model boxes {
  id                   String              @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  description          String?
  price                Int
  size                 Float?
  isAvailable          Boolean             @default(true)
  maxHorseSize         String?
  specialNotes         String?
  images               String[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  stableId             String
  isAdvertised         Boolean             @default(false)
  advertisingStartDate DateTime?
  advertisingUntil     DateTime?
  imageDescriptions    String[]
  isSponsored          Boolean             @default(false)
  sponsoredStartDate   DateTime?
  sponsoredUntil       DateTime?
  boxType              BoxType             @default(BOKS)
  box_amenity_links    box_amenity_links[]
  stables              stables             @relation(fields: [stableId], references: [id], onDelete: Cascade)
  conversations        conversations[]
  invoice_requests     invoice_requests[]
  page_views           page_views[]
}

model conversations {
  id        String             @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  stableId  String
  boxId     String?
  status    ConversationStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime
  boxes     boxes?             @relation(fields: [boxId], references: [id])
  stables   stables            @relation(fields: [stableId], references: [id], onDelete: Cascade)
  users     users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  messages[]

  @@unique([userId, stableId, boxId])
}

model counties {
  id             String           @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  countyNumber   String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  municipalities municipalities[]
  stables        stables[]
}

model messages {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  conversationId String
  senderId       String
  content        String
  messageType    MessageType   @default(TEXT)
  metadata       Json?
  isRead         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  users          users         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model municipalities {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  municipalityNumber String    @unique
  countyId           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  counties           counties  @relation(fields: [countyId], references: [id], onDelete: Cascade)
  stables            stables[]
}

model page_views {
  id         String     @id @default(dbgenerated("gen_random_uuid()"))
  entityType EntityType
  entityId   String
  viewerId   String?
  ipAddress  String?
  userAgent  String?
  referrer   String?
  createdAt  DateTime   @default(now())
  boxes      boxes      @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "page_views_box_fkey")
  stables    stables    @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "page_views_stable_fkey")
  users      users?     @relation(fields: [viewerId], references: [id])

  @@index([createdAt])
  @@index([entityType, entityId])
}

model invoice_requests {
  id            String               @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  fullName      String
  address       String
  postalCode    String
  city          String
  phone         String
  email         String
  amount        Int
  months        Int?
  days          Int?
  discount      Float                @default(0)
  description   String
  itemType      InvoiceItemType
  status        InvoiceRequestStatus @default(PENDING)
  invoiceSent   Boolean              @default(false)
  invoiceSentAt DateTime?
  invoiceNumber String?
  paidAt        DateTime?
  adminNotes    String?
  stableId      String?
  serviceId     String?
  boxId         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  boxes         boxes?               @relation(fields: [boxId], references: [id], onDelete: Cascade)
  services      services?            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  stables       stables?             @relation(fields: [stableId], references: [id], onDelete: Cascade)
  users         users                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model pricing_discounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  months     Int      @unique
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model service_pricing_discounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  days       Int      @unique
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model stable_amenities {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime               @default(now())
  name                 String                 @unique
  updatedAt            DateTime               @default(now())
  stable_amenity_links stable_amenity_links[]
}

model stable_amenity_links {
  id               String           @id @default(dbgenerated("gen_random_uuid()"))
  stableId         String
  amenityId        String
  createdAt        DateTime         @default(now())
  stable_amenities stable_amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  stables          stables          @relation(fields: [stableId], references: [id], onDelete: Cascade)

  @@unique([stableId, amenityId])
}

model stable_faqs {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  stableId  String
  question  String
  answer    String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  stables   stables  @relation(fields: [stableId], references: [id], onDelete: Cascade)
}

model stables {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  description          String
  address              String?
  postalCode           String?
  rating               Float                  @default(0)
  reviewCount          Int                    @default(0)
  images               String[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  ownerId              String
  latitude             Float?
  longitude            Float?
  imageDescriptions    String[]
  totalBoxes           Int?
  countyId             String?
  municipalityId       String?
  postalPlace          String?
  boxes                boxes[]
  conversations        conversations[]
  invoice_requests     invoice_requests[]
  page_views           page_views[]
  stable_amenity_links stable_amenity_links[]
  stable_faqs          stable_faqs[]
  counties             counties?              @relation(fields: [countyId], references: [id])
  municipalities       municipalities?        @relation(fields: [municipalityId], references: [id])
  users                users                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model users {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  email            String             @unique
  name             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  phone            String?
  avatar           String?
  isAdmin          Boolean            @default(false)
  conversations    conversations[]
  invoice_requests invoice_requests[]
  messages         messages[]
  page_views       page_views[]
  services         services[]
  stables          stables[]
}

model services {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  title              String
  description        String
  serviceType        ServiceType
  price              Int?
  priceRangeMin      Int?
  priceRangeMax      Int?
  contactEmail       String
  contactPhone       String?
  isActive           Boolean            @default(true)
  advertisingActive  Boolean            @default(false)
  advertisingEndDate DateTime?
  expiresAt          DateTime
  userId             String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  invoice_requests   invoice_requests[]
  service_areas      service_areas[]
  service_photos     service_photos[]
  users              users              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model service_areas {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  serviceId    String
  county       String
  municipality String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  services     services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model service_photos {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  serviceId   String
  photoUrl    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  services    services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model suggestions {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String?
  description String
  email       String?
  name        String?
  isReviewed  Boolean  @default(false)
  response    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BoxType {
  BOKS
  UTEGANG
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
}

enum EntityType {
  STABLE
  BOX
  SERVICE
}

enum MessageType {
  TEXT
  SYSTEM
}

enum InvoiceRequestStatus {
  PENDING
  INVOICE_SENT
  PAID
  CANCELLED
}

enum InvoiceItemType {
  STABLE_ADVERTISING
  BOX_ADVERTISING
  BOX_SPONSORED
  SERVICE_ADVERTISING
}

enum ServiceType {
  VETERINARIAN
  FARRIER
  TRAINER
  CHIROPRACTOR
  SADDLEFITTER
  EQUESTRIAN_SHOP
}
