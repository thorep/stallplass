generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model base_prices {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  price       Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model box_amenities {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime            @default(now())
  name              String              @unique
  updatedAt         DateTime            @default(now())
  box_amenity_links box_amenity_links[]
}

model box_amenity_links {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  boxId         String
  amenityId     String
  createdAt     DateTime      @default(now())
  box_amenities box_amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  boxes         boxes         @relation(fields: [boxId], references: [id], onDelete: Cascade)

  @@unique([boxId, amenityId])
}

model boxes {
  id                   String              @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  description          String?
  price                Int
  size                 BoxSize?
  sizeText             String?
  isAvailable          Boolean             @default(true)
  maxHorseSize         String?
  specialNotes         String?
  images               String[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  stableId             String
  imageDescriptions    String[]
  isSponsored          Boolean             @default(false)
  sponsoredStartDate   DateTime?
  sponsoredUntil       DateTime?
  boxType              BoxType             @default(BOKS)
  advertisingActive    Boolean             @default(false)
  advertisingEndDate   DateTime?
  advertisingStartDate DateTime?
  viewCount            Int                 @default(0)
  availabilityDate     DateTime?
  archived             Boolean             @default(false)
  deletedAt            DateTime?
  box_amenity_links    box_amenity_links[]
  stables              stables             @relation(fields: [stableId], references: [id], onDelete: Cascade)
  conversations        conversations[]
}

model conversations {
  id        String             @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  stableId  String?
  boxId     String?
  status    ConversationStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Snapshot data for when box/stable is deleted
  boxSnapshot    Json? // Stores { name, price, image } when box is deleted
  stableSnapshot Json? // Stores { name } when stable is deleted

  user     profiles   @relation(fields: [userId], references: [id])
  stable   stables?   @relation(fields: [stableId], references: [id], onDelete: SetNull)
  box      boxes?     @relation(fields: [boxId], references: [id], onDelete: SetNull)
  messages messages[]

  @@unique([userId, stableId, boxId])
  @@index([stableId])
  @@index([boxId])
}

model counties {
  id             String           @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  countyNumber   String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  municipalities municipalities[]
  stables        stables[]
}

model messages {
  id             String      @id @default(dbgenerated("gen_random_uuid()"))
  conversationId String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  metadata       Json?
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  conversation conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       profiles      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model municipalities {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  municipalityNumber String    @unique
  countyId           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  counties           counties  @relation(fields: [countyId], references: [id], onDelete: Cascade)
  stables            stables[]
}

model invoice_requests {
  id             String               @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  fullName       String
  address        String
  postalCode     String
  city           String
  phone          String
  email          String
  amount         Float
  months         Int?
  days           Int?
  discount       Float                @default(0)
  description    String
  itemType       InvoiceItemType
  status         InvoiceRequestStatus @default(PENDING)
  invoiceSent    Boolean              @default(false)
  invoiceSentAt  DateTime?
  invoiceNumber  String?
  paidAt         DateTime?
  adminNotes     String?
  stableId       String?
  serviceId      String?
  boxId          String?
  discountCodeId String? // Reference to applied discount code
  discountCode   String? // Store the actual code used for reference
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  slots          Int?
  services       services?            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  stables        stables?             @relation(fields: [stableId], references: [id], onDelete: Cascade)
  profiles       profiles             @relation(fields: [userId], references: [id], onDelete: Cascade)
  discount_codes discount_codes?      @relation(fields: [discountCodeId], references: [id])
}

model pricing_discounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  months     Int      @unique
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model service_pricing_discounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  months     Int      @unique
}

model boost_pricing_discounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  days       Int
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  maxDays    Int?

  @@unique([days, maxDays])
}

model box_quantity_discounts {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  minBoxes           Int
  maxBoxes           Int?
  discountPercentage Float
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([minBoxes, maxBoxes])
}

model stable_amenities {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime               @default(now())
  name                 String                 @unique
  updatedAt            DateTime               @default(now())
  stable_amenity_links stable_amenity_links[]
}

model stable_amenity_links {
  id               String           @id @default(dbgenerated("gen_random_uuid()"))
  stableId         String
  amenityId        String
  createdAt        DateTime         @default(now())
  stable_amenities stable_amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  stables          stables          @relation(fields: [stableId], references: [id], onDelete: Cascade)

  @@unique([stableId, amenityId])
}

model stable_faqs {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  stableId  String
  question  String
  answer    String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  stables   stables  @relation(fields: [stableId], references: [id], onDelete: Cascade)
}

model stables {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  description          String
  address              String?
  postalCode           String?
  rating               Float                  @default(0)
  reviewCount          Int                    @default(0)
  images               String[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  ownerId              String
  latitude             Float
  longitude            Float
  imageDescriptions    String[]
  countyId             String?
  municipalityId       String?
  postalPlace          String?
  viewCount            Int                    @default(0)
  archived             Boolean                @default(false)
  deletedAt            DateTime?
  boxes                boxes[]
  conversations        conversations[]
  invoice_requests     invoice_requests[]
  stable_amenity_links stable_amenity_links[]
  stable_faqs          stable_faqs[]
  counties             counties?              @relation(fields: [countyId], references: [id])
  municipalities       municipalities?        @relation(fields: [municipalityId], references: [id])
  profiles             profiles               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  horses               horses[]               @relation("HorseStable")
}

model profiles {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  firstname        String?
  middlename       String?
  lastname         String?
  nickname         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  phone            String?
  isAdmin          Boolean            @default(false)
  conversations    conversations[]
  invoice_requests invoice_requests[]
  messages         messages[]
  services         services[]
  stables          stables[]
  horses           horses[]
  horsesSharedWith horse_shares[]     @relation("HorseSharedWith")
  horsesSharedBy   horse_shares[]     @relation("HorseSharedBy")
  careLogsCreated     care_logs[]     @relation("CareLogCreator")
  exerciseLogsCreated exercise_logs[] @relation("ExerciseLogCreator")
  feedingLogsCreated  feeding_logs[]  @relation("FeedingLogCreator")
  medicalLogsCreated  medical_logs[]  @relation("MedicalLogCreator")
  otherLogsCreated    other_logs[]    @relation("OtherLogCreator")
  Adresse1         String?
  Adresse2         String?
  Postnummer       String?
  Poststed         String?

  @@map("profiles")
}

model service_types {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  name        String     @unique
  displayName String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  services    services[]
}

model services {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  title              String
  description        String
  serviceTypeId      String
  price              Int?
  priceRangeMin      Int?
  priceRangeMax      Int?
  contactName        String
  contactEmail       String?
  contactPhone       String?
  isActive           Boolean            @default(true)
  advertisingActive  Boolean            @default(false)
  advertisingEndDate DateTime?
  userId             String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  viewCount          Int                @default(0)
  archived           Boolean            @default(false)
  deletedAt          DateTime?
  invoice_requests   invoice_requests[]
  service_areas      service_areas[]
  service_photos     service_photos[]
  service_types      service_types      @relation(fields: [serviceTypeId], references: [id])
  profiles           profiles           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model service_areas {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  serviceId    String
  county       String
  municipality String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  services     services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model service_photos {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  serviceId   String
  photoUrl    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  services    services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model horses {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  breed             String?
  age               Int?
  color             String?
  gender            HorseGender?
  height            Float? // Height in cm
  weight            Float? // Weight in kg
  description       String?
  careInstructions  String? // General care instructions
  exerciseInstructions String? // General exercise instructions
  medicalNotes      String? // Medical information/requirements
  feedingNotes      String? // Feeding instructions
  otherNotes        String? // Other general notes/instructions
  images            String[] // Array of image URLs
  imageDescriptions String[] // Descriptions for each image
  logDisplayMode    String        @default("FULL") // FULL or TRUNCATED
  stableId          String?       // Optional connection to a stable
  ownerId           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  archived          Boolean       @default(false)
  deletedAt         DateTime?

  profiles     profiles       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stable       stables?       @relation("HorseStable", fields: [stableId], references: [id], onDelete: SetNull)
  careLogs     care_logs[]
  exerciseLogs exercise_logs[]
  feedingLogs  feeding_logs[]
  medicalLogs  medical_logs[]
  otherLogs    other_logs[]
  horseShares  horse_shares[]
}

model care_logs {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId           String
  profileId         String
  description       String
  images            String[] @default([]) // Array of image URLs
  imageDescriptions String[] @default([]) // Descriptions for each image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  horse   horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  profile profiles @relation("CareLogCreator", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([horseId])
  @@index([profileId])
}

model exercise_logs {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId           String
  profileId         String
  description       String
  images            String[] @default([]) // Array of image URLs
  imageDescriptions String[] @default([]) // Descriptions for each image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  horse   horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  profile profiles @relation("ExerciseLogCreator", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([horseId])
  @@index([profileId])
}

model feeding_logs {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId           String
  profileId         String
  description       String
  images            String[] @default([]) // Array of image URLs
  imageDescriptions String[] @default([]) // Descriptions for each image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  horse   horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  profile profiles @relation("FeedingLogCreator", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([horseId])
  @@index([profileId])
}

model medical_logs {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId           String
  profileId         String
  description       String
  images            String[] @default([]) // Array of image URLs
  imageDescriptions String[] @default([]) // Descriptions for each image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  horse   horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  profile profiles @relation("MedicalLogCreator", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([horseId])
  @@index([profileId])
}

model other_logs {
  id                String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId           String
  profileId         String
  description       String
  images            String[] @default([]) // Array of image URLs
  imageDescriptions String[] @default([]) // Descriptions for each image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  horse   horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  profile profiles @relation("OtherLogCreator", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([horseId])
  @@index([profileId])
}

model horse_shares {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId      String
  sharedWithId String
  sharedById   String
  permissions  String[] @default(["VIEW"])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  horse      horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  sharedWith profiles @relation("HorseSharedWith", fields: [sharedWithId], references: [id], onDelete: Cascade)
  sharedBy   profiles @relation("HorseSharedBy", fields: [sharedById], references: [id], onDelete: Cascade)

  @@unique([horseId, sharedWithId])
  @@index([horseId])
  @@index([sharedWithId])
  @@index([sharedById])
}

model discount_codes {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  code            String            @unique
  name            String // Display name for admin
  description     String? // Optional description
  discountType    DiscountType // PERCENTAGE or FIXED_AMOUNT
  discountValue   Float // Percentage (0-100) or fixed amount in NOK
  minOrderAmount  Float? // Minimum order amount to use this code
  maxDiscount     Float? // Maximum discount amount (for percentage codes)
  validFrom       DateTime          @default(now())
  validUntil      DateTime? // Null = no expiry
  isActive        Boolean           @default(true)
  applicableItems InvoiceItemType[] // Which item types this code applies to
  usageCount      Int               @default(0) // Track how many times the code has been used
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  invoice_requests invoice_requests[]
}

enum HorseGender {
  HOPPE // Mare
  HINGST // Stallion  
  VALLACH // Gelding
}

enum BoxType {
  BOKS
  UTEGANG
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
}

enum EntityType {
  STABLE
  BOX
  SERVICE
}

enum MessageType {
  TEXT
  IMAGE
  STABLE_LINK
  BOX_LINK
}

enum InvoiceRequestStatus {
  PENDING
  INVOICE_SENT
  PAID
  CANCELLED
}

enum InvoiceItemType {
  BOX_ADVERTISING
  BOX_SPONSORED
  SERVICE_ADVERTISING
}

enum BoxSize {
  SMALL
  MEDIUM
  LARGE
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
