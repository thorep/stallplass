generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  email           String         @unique
  name            String?
  firebaseId      String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  phone           String?
  bio             String?
  avatar          String?
  isAdmin         Boolean        @default(false)
  conversations   Conversation[] @relation("RiderConversations")
  sentMessages    Message[]      @relation("SenderMessages")
  payments        Payment[]
  rentals         Rental[]
  reviewsReceived Review[]       @relation("ReviewsReceived")
  reviewsGiven    Review[]       @relation("ReviewsGiven")
  stables         Stable[]
  pageViews       PageView[]

  @@map("users")
}

model Stable {
  id                   String              @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  description          String
  location             String
  address              String?
  postalCode           String?
  city                 String?
  county               String?
  rating               Float               @default(0)
  reviewCount          Int                 @default(0)
  images               String[]
  featured             Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  ownerId              String
  ownerName            String
  ownerPhone           String
  ownerEmail           String
  latitude             Float?
  longitude            Float?
  advertisingActive    Boolean             @default(false)
  advertisingEndDate   DateTime?
  advertisingStartDate DateTime?
  imageDescriptions    String[]
  totalBoxes           Int?
  boxes                Box[]
  conversations        Conversation[]
  payments             Payment[]
  rentals              Rental[]
  reviews              Review[]
  amenities            StableAmenityLink[]
  faqs                 StableFAQ[]
  pageViews            PageView[]
  owner                User                @relation(fields: [ownerId], references: [firebaseId], onDelete: Cascade)

  @@map("stables")
}

model StableAmenity {
  id        String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime            @default(now())
  name      String              @unique
  updatedAt DateTime            @default(now()) @updatedAt
  stables   StableAmenityLink[]

  @@map("stable_amenities")
}

model BoxAmenity {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime         @default(now())
  name      String           @unique
  updatedAt DateTime         @default(now()) @updatedAt
  boxes     BoxAmenityLink[]

  @@map("box_amenities")
}

model Box {
  id                 String           @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  description        String?
  price              Int
  size               Float?
  isAvailable        Boolean          @default(true)
  isIndoor           Boolean          @default(true)
  hasWindow          Boolean          @default(false)
  hasElectricity     Boolean          @default(false)
  hasWater           Boolean          @default(false)
  maxHorseSize       String?
  specialNotes       String?
  images             String[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  stableId           String
  isActive           Boolean          @default(false)
  imageDescriptions  String[]
  isSponsored        Boolean          @default(false)
  sponsoredStartDate DateTime?
  sponsoredUntil     DateTime?
  boxType            BoxType          @default(BOKS)
  amenities          BoxAmenityLink[]
  stable             Stable           @relation(fields: [stableId], references: [id], onDelete: Cascade)
  conversations      Conversation[]
  rentals            Rental[]
  pageViews          PageView[]

  @@map("boxes")
}

model StableAmenityLink {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  stableId  String
  amenityId String
  createdAt DateTime      @default(now())
  amenity   StableAmenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  stable    Stable        @relation(fields: [stableId], references: [id], onDelete: Cascade)

  @@unique([stableId, amenityId])
  @@map("stable_amenity_links")
}

model BoxAmenityLink {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  boxId     String
  amenityId String
  createdAt DateTime   @default(now())
  amenity   BoxAmenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  box       Box        @relation(fields: [boxId], references: [id], onDelete: Cascade)

  @@unique([boxId, amenityId])
  @@map("box_amenity_links")
}

model Conversation {
  id        String             @id @default(dbgenerated("gen_random_uuid()"))
  riderId   String
  stableId  String
  boxId     String?
  status    ConversationStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  box       Box?               @relation(fields: [boxId], references: [id])
  rider     User               @relation("RiderConversations", fields: [riderId], references: [firebaseId], onDelete: Cascade)
  stable    Stable             @relation(fields: [stableId], references: [id], onDelete: Cascade)
  messages  Message[]
  rental    Rental?

  @@unique([riderId, stableId, boxId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  conversationId String
  senderId       String
  content        String
  messageType    MessageType  @default(TEXT)
  metadata       Json?
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SenderMessages", fields: [senderId], references: [firebaseId], onDelete: Cascade)

  @@map("messages")
}

model Rental {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  conversationId String       @unique
  riderId        String
  stableId       String
  boxId          String
  startDate      DateTime
  endDate        DateTime?
  monthlyPrice   Int
  status         RentalStatus @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  box            Box          @relation(fields: [boxId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  rider          User         @relation(fields: [riderId], references: [firebaseId], onDelete: Cascade)
  stable         Stable       @relation(fields: [stableId], references: [id], onDelete: Cascade)
  reviews        Review[]

  @@map("rentals")
}

model BasePrice {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  price       Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("base_prices")
}

model PricingDiscount {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  months     Int      @unique
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("pricing_discounts")
}

model RoadmapItem {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  description   String
  category      String
  status        RoadmapStatus   @default(PLANNED)
  priority      RoadmapPriority @default(MEDIUM)
  estimatedDate DateTime?
  completedDate DateTime?
  isPublic      Boolean         @default(true)
  sortOrder     Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("roadmap_items")
}

model Payment {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  amount         Int
  months         Int
  discount       Float         @default(0)
  totalAmount    Int
  vippsOrderId   String        @unique
  vippsReference String?
  status         PaymentStatus @default(PENDING)
  paymentMethod  PaymentMethod @default(VIPPS)
  paidAt         DateTime?
  failedAt       DateTime?
  failureReason  String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  stableId       String
  firebaseId     String
  stable         Stable        @relation(fields: [stableId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [firebaseId], onDelete: Cascade)

  @@map("payments")
}

model StableFAQ {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  stableId  String
  question  String
  answer    String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stable    Stable   @relation(fields: [stableId], references: [id], onDelete: Cascade)

  @@map("stable_faqs")
}

model Review {
  id                  String       @id @default(dbgenerated("gen_random_uuid()"))
  rentalId            String
  reviewerId          String
  revieweeId          String
  revieweeType        RevieweeType
  stableId            String
  rating              Int
  title               String?
  comment             String?
  communicationRating Int?
  cleanlinessRating   Int?
  facilitiesRating    Int?
  reliabilityRating   Int?
  isPublic            Boolean      @default(true)
  isModerated         Boolean      @default(false)
  moderatorNotes      String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  rental              Rental       @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  reviewee            User         @relation("ReviewsReceived", fields: [revieweeId], references: [firebaseId], onDelete: Cascade)
  reviewer            User         @relation("ReviewsGiven", fields: [reviewerId], references: [firebaseId], onDelete: Cascade)
  stable              Stable       @relation(fields: [stableId], references: [id], onDelete: Cascade)

  @@unique([rentalId, reviewerId, revieweeType])
  @@map("reviews")
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  RENTAL_CONFIRMED
}

enum MessageType {
  TEXT
  RENTAL_REQUEST
  RENTAL_CONFIRMATION
  SYSTEM
}

enum RentalStatus {
  ACTIVE
  ENDED
  CANCELLED
}

enum BoxType {
  BOKS
  UTEGANG
}

enum RoadmapStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RoadmapPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  VIPPS
  CARD
}

enum RevieweeType {
  RENTER
  STABLE_OWNER
}

model PageView {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  entityType   EntityType
  entityId     String
  viewerId     String?
  ipAddress    String?
  userAgent    String?
  referrer     String?
  createdAt    DateTime   @default(now())
  stable       Stable?    @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "page_views_stable_fkey")
  box          Box?       @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "page_views_box_fkey")
  viewer       User?      @relation(fields: [viewerId], references: [firebaseId], onDelete: SetNull)

  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("page_views")
}

enum EntityType {
  STABLE
  BOX
}
