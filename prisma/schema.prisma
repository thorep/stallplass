// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  name      String?
  firebaseId String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile fields
  phone     String?
  bio       String?
  avatar    String?
  
  // Relations
  stables   Stable[]
  
  @@map("users")
}

model Stable {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  description     String
  location        String
  address         String?
  postalCode      String?
  city            String?
  county          String?
  rating          Float    @default(0)
  reviewCount     Int      @default(0)
  images          String[]
  featured        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Owner information
  ownerId         String
  owner           User     @relation(fields: [ownerId], references: [firebaseId], onDelete: Cascade)
  
  // Contact info (denormalized for convenience)
  ownerName       String
  ownerPhone      String
  ownerEmail      String
  
  // Relations
  amenities       StableAmenity[]
  boxes           Box[]
  
  @@map("stables")
}

model Amenity {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Relationships
  stables   StableAmenity[]
  boxes     BoxAmenity[]
  
  @@map("amenities")
}

model Box {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  name            String   // e.g., "Box 1", "Stall A", "Premium Box 3"
  description     String?  // Specific description for this box
  price           Int      // Monthly price in Ã¸re (Norwegian currency)
  size            Float?   // Size in square meters
  isAvailable     Boolean  @default(true)
  isIndoor        Boolean  @default(true)
  hasWindow       Boolean  @default(false)
  hasDoor         Boolean  @default(true)
  hasElectricity  Boolean  @default(false)
  hasWater        Boolean  @default(false)
  maxHorseSize    String?  // e.g., "Large", "Medium", "Small", "Pony"
  specialNotes    String?  // Any special requirements or notes
  images          String[] // Specific images for this box
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  stableId        String
  stable          Stable   @relation(fields: [stableId], references: [id], onDelete: Cascade)
  amenities       BoxAmenity[]
  
  @@map("boxes")
}

model StableAmenity {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  stableId  String
  amenityId String
  createdAt DateTime @default(now())
  
  stable    Stable   @relation(fields: [stableId], references: [id], onDelete: Cascade)
  amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  
  @@unique([stableId, amenityId])
  @@map("stable_amenities")
}

model BoxAmenity {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  boxId     String
  amenityId String
  createdAt DateTime @default(now())
  
  box       Box      @relation(fields: [boxId], references: [id], onDelete: Cascade)
  amenity   Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  
  @@unique([boxId, amenityId])
  @@map("box_amenities")
}
