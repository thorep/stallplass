generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admin_settings {
  id                  String   @id @default(dbgenerated("gen_random_uuid()"))
  advertisementChance Float    @default(50.0)
  advertisementMinPos Int      @default(1)
  advertisementMaxPos Int      @default(40)
  createdAt           DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model boost_pricing_discounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  days       Int
  percentage Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  maxDays    Int?

  @@unique([days, maxDays])
}

model box_amenities {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime            @default(now())
  name              String              @unique
  updatedAt         DateTime            @default(now())
  box_amenity_links box_amenity_links[]
}

model box_amenity_links {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  boxId         String
  amenityId     String
  createdAt     DateTime      @default(now())
  box_amenities box_amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  boxes         boxes         @relation(fields: [boxId], references: [id], onDelete: Cascade)

  @@unique([boxId, amenityId])
}

model boxes {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  description        String?
  price              Int
  availableQuantity  Int                 @default(1)
  maxHorseSize       String?
  specialNotes       String?
  images             String[]
  createdAt          DateTime            @default(now())
  updatedAt DateTime @updatedAt
  stableId           String
  imageDescriptions  String[]
  isSponsored        Boolean             @default(false)
  sponsoredStartDate DateTime?
  sponsoredUntil     DateTime?
  boxType            BoxType             @default(BOKS)
  viewCount          Int                 @default(0)
  archived           Boolean             @default(false)
  deletedAt          DateTime?
  size               BoxSize?
  sizeText           String?
  dagsleie           Boolean             @default(false)
  box_amenity_links  box_amenity_links[]
  stables            stables             @relation(fields: [stableId], references: [id], onDelete: Cascade)
  conversations      conversations[]
}

model conversations {
  id                    String             @id @default(dbgenerated("gen_random_uuid()"))
  userId                String?
  stableId              String?
  boxId                 String?
  status                ConversationStatus @default(ACTIVE)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  boxSnapshot           Json?
  stableSnapshot        Json?
  serviceId             String?
  serviceSnapshot       Json?
  partLoanHorseId       String?
  partLoanHorseSnapshot Json?
  horseSaleId           String?
  horseSaleSnapshot     Json?
  box           boxes?             @relation(fields: [boxId], references: [id])
  partLoanHorse part_loan_horses?  @relation(fields: [partLoanHorseId], references: [id])
  service       services?          @relation(fields: [serviceId], references: [id])
  stable        stables?           @relation(fields: [stableId], references: [id])
  horseSale     horse_sales?       @relation(fields: [horseSaleId], references: [id])
  user          profiles?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages              messages[]

  @@unique([userId, serviceId])
  @@unique([userId, stableId, boxId])
  @@unique([userId, partLoanHorseId])
  @@unique([userId, horseSaleId])
  @@index([boxId])
  @@index([partLoanHorseId])
  @@index([serviceId])
  @@index([stableId])
  @@index([horseSaleId])
}

model counties {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  countyNumber     String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  municipalities   municipalities[]
  part_loan_horses part_loan_horses[]
  stables          stables[]
  services         services[]
  horse_sales      horse_sales[]
}

model custom_log_categories {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  horseId     String
  ownerId     String
  name        String
  description String?
  icon        String        @default("ClipboardList")
  color       String        @default("text-indigo-600")
  isActive    Boolean       @default(true)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  horse   horses        @relation(fields: [horseId], references: [id], onDelete: Cascade)
  owner   profiles      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  logs    custom_logs[]

  @@unique([horseId, name])
  @@index([horseId])
  @@index([horseId, isActive, sortOrder])
  @@index([ownerId])
}

model custom_logs {
  id                    String                @id @default(dbgenerated("gen_random_uuid()"))
  categoryId            String
  horseId               String
  profileId             String
  description           String
  images                String[]              @default([])
  imageDescriptions     String[]              @default([])
  createdAt             DateTime              @default(now())
  updatedAt DateTime @updatedAt
  category custom_log_categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  horse    horses                @relation(fields: [horseId], references: [id], onDelete: Cascade)
  profile  profiles              @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([categoryId, createdAt])
  @@index([categoryId])
  @@index([horseId])
  @@index([profileId])
}

model forum_categories {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  name           String          @unique
  slug           String          @unique
  description    String?
  color          String?
  icon           String?
  sortOrder      Int             @default(0)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt DateTime @updatedAt
  sectionId      String?
  section forum_sections? @relation(fields: [sectionId], references: [id])
  posts    forum_posts[]

  @@index([sectionId])
  @@index([slug])
  @@index([sortOrder, isActive])
}

model forum_posts {
  id                String            @id @default(dbgenerated("gen_random_uuid()"))
  title             String?
  content           String
  contentType       String            @default("html")
  authorId          String?
  parentId          String?
  categoryId        String?
  viewCount         Int               @default(0)
  isPinned          Boolean           @default(false)
  isLocked          Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt DateTime @updatedAt
  images            String[]          @default([])
  author   profiles?         @relation(fields: [authorId], references: [id], onDelete: SetNull)
  category forum_categories? @relation(fields: [categoryId], references: [id])
  parent   forum_posts?      @relation("forum_postsToforum_posts", fields: [parentId], references: [id])
  replies  forum_posts[]     @relation("forum_postsToforum_posts")
  reactions forum_reactions[]
  tags     forum_tags[]

  @@index([authorId])
  @@index([categoryId, isPinned, createdAt])
  @@index([createdAt])
  @@index([parentId, createdAt])
}

model forum_reactions {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  postId      String
  userId      String?
  type        String
  createdAt   DateTime    @default(now())
  post forum_posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  user profiles?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([postId, userId, type])
  @@index([postId])
  @@index([postId, type])
  @@index([userId])
}

model forum_sections {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  name             String             @unique
  description      String?
  color            String?
  sortOrder        Int                @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt DateTime @updatedAt
  categories forum_categories[]

  @@index([sortOrder, isActive])
}

model forum_tags {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  threadId    String
  name        String
  thread forum_posts @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([threadId])
}

model horse_shares {
  id                                           String   @id @default(dbgenerated("gen_random_uuid()"))
  horseId                                      String
  sharedWithId                                 String
  sharedById                                   String
  permissions                                  String[] @default(["VIEW"])
  createdAt                                    DateTime @default(now())
  updatedAt DateTime @updatedAt
  horse      horses   @relation(fields: [horseId], references: [id], onDelete: Cascade)
  sharedBy   profiles @relation("horse_shares_sharedByIdToprofiles", fields: [sharedById], references: [id], onDelete: Cascade)
  sharedWith profiles @relation("horse_shares_sharedWithIdToprofiles", fields: [sharedWithId], references: [id], onDelete: Cascade)

  @@unique([horseId, sharedWithId])
  @@index([horseId])
  @@index([sharedById])
  @@index([sharedWithId])
}

model horses {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  name                  String
  breed                 String?
  age                   Int?
  color                 String?
  gender                HorseGender?
  height                Float?
  weight                Float?
  description           String?
  medicalNotes          String?
  feedingNotes          String?
  images                String[]
  imageDescriptions     String[]
  ownerId               String
  createdAt             DateTime                @default(now())
  updatedAt DateTime @updatedAt
  archived              Boolean                 @default(false)
  deletedAt             DateTime?
  careInstructions      String?
  exerciseInstructions  String?
  otherNotes            String?
  logDisplayMode        String                  @default("FULL")
  stableId              String?
  customLogCategories custom_log_categories[]
  customLogs           custom_logs[]
  horseShares          horse_shares[]
  profiles              profiles                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stable               stables?                @relation(fields: [stableId], references: [id])
}

model messages {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  conversationId String
  senderId       String?
  content        String
  messageType    MessageType   @default(TEXT)
  metadata       Json?
  isRead         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  conversation conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       profiles?     @relation(fields: [senderId], references: [id], onDelete: SetNull)
}

model municipalities {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  municipalityNumber String             @unique
  countyId           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now())
  counties           counties           @relation(fields: [countyId], references: [id], onDelete: Cascade)
  part_loan_horses   part_loan_horses[]
  stables            stables[]
  services           services[]
  horse_sales        horse_sales[]
}

model profiles {
  id                                               String                  @id @default(dbgenerated("gen_random_uuid()"))
  createdAt                                        DateTime                @default(now())
  updatedAt DateTime @updatedAt
  phone                                            String?
  isAdmin                                          Boolean                 @default(false)
  firstname                                        String?
  lastname                                         String?
  middlename                                       String?
  nickname                                         String
  Adresse1                                         String?
  Adresse2                                         String?
  Postnummer                                       String?
  Poststed                                         String?
  email_consent                                    Boolean                 @default(false)
  favoriteStables                                  String[]                @default([])
  message_notification_email                       Boolean                 @default(true)
  conversations                                    conversations[]
  custom_log_categories                            custom_log_categories[]
  custom_logs                                      custom_logs[]
  forum_posts                                      forum_posts[]
  forum_reactions                                  forum_reactions[]
  horse_shares_horse_shares_sharedByIdToprofiles   horse_shares[]          @relation("horse_shares_sharedByIdToprofiles")
  horse_shares_horse_shares_sharedWithIdToprofiles horse_shares[]          @relation("horse_shares_sharedWithIdToprofiles")
  horses                                           horses[]
  messages                                         messages[]
  part_loan_horses                                 part_loan_horses[]
  services                                         services[]
  stables                                          stables[]
  horse_sales                                      horse_sales[]
  horse_buys                                       horse_buys[]
}

model service_areas {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  serviceId    String
  county       String
  municipality String?
  createdAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  services     services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model service_types {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  name        String     @unique
  displayName String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt DateTime @updatedAt
  services    services[]
}

model services {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  title             String
  description       String
  price             Int?
  priceRangeMin     Int?
  priceRangeMax     Int?
  contactEmail      String?
  contactPhone      String?
  isActive          Boolean         @default(true)
  userId            String
  address           String?         // Street address
  postalCode        String?         // Postal code
  latitude          Float?          // Latitude coordinate
  longitude         Float?          // Longitude coordinate
  postalPlace       String?         // Postal place name
  countyId          String?         // Reference to counties table
  municipalityId    String?         // Reference to municipalities table
  createdAt         DateTime        @default(now())
  updatedAt DateTime @updatedAt
  viewCount         Int             @default(0)
  serviceTypeId     String
  contactName       String
  archived          Boolean         @default(false)
  deletedAt         DateTime?
  imageDescriptions String[]        @default([])
  images            String[]        @default([])
  conversations     conversations[]
  service_areas     service_areas[]
  service_types     service_types   @relation(fields: [serviceTypeId], references: [id])
  profiles          profiles        @relation(fields: [userId], references: [id], onDelete: Cascade)
  counties          counties?       @relation(fields: [countyId], references: [id])
  municipalities    municipalities? @relation(fields: [municipalityId], references: [id])
}

model part_loan_horses {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  description       String
  address           String?
  postalCode        String?
  postalPlace       String?
  latitude          Float?
  longitude         Float?
  countyId          String?
  municipalityId    String?
  images            String[]        @default([])
  imageDescriptions String[]        @default([])
  userId            String
  viewCount         Int             @default(0)
  archived          Boolean         @default(false)
  deletedAt         DateTime?
  contactName       String?
  contactEmail      String?
  contactPhone      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  profiles          profiles        @relation(fields: [userId], references: [id], onDelete: Cascade)
  counties          counties?       @relation(fields: [countyId], references: [id])
  municipalities    municipalities? @relation(fields: [municipalityId], references: [id])
  conversations     conversations[]
}

model stable_amenities {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime               @default(now())
  name                 String                 @unique
  updatedAt            DateTime               @default(now())
  stable_amenity_links stable_amenity_links[]
}

model stable_amenity_links {
  id               String           @id @default(dbgenerated("gen_random_uuid()"))
  stableId         String
  amenityId        String
  createdAt        DateTime         @default(now())
  stable_amenities stable_amenities @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  stables          stables          @relation(fields: [stableId], references: [id], onDelete: Cascade)

  @@unique([stableId, amenityId])
}

model stable_faqs {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  stableId  String
  question  String
  answer    String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stables   stables  @relation(fields: [stableId], references: [id], onDelete: Cascade)
}

model stables {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  name                 String
  description          String
  address              String?
  postalCode           String?
  rating               Float                  @default(0)
  reviewCount          Int                    @default(0)
  images               String[]
  createdAt            DateTime               @default(now())
  updatedAt DateTime @updatedAt
  ownerId              String
  latitude             Float
  longitude            Float
  imageDescriptions    String[]
  countyId             String?
  municipalityId       String?
  postalPlace          String?
  viewCount            Int                    @default(0)
  archived             Boolean                @default(false)
  deletedAt            DateTime?
  contactName          String?
  contactEmail         String?
  contactPhone         String?
  boxes                boxes[]
  conversations        conversations[]
  horses               horses[]
  stable_amenity_links stable_amenity_links[]
  stable_faqs          stable_faqs[]
  counties             counties?              @relation(fields: [countyId], references: [id])
  municipalities       municipalities?        @relation(fields: [municipalityId], references: [id])
  profiles             profiles               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

enum BoxSize {
  SMALL
  MEDIUM
  LARGE
}

enum BoxType {
  BOKS
  UTEGANG
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
}

enum EntityType {
  STABLE
  BOX
  SERVICE
  PART_LOAN_HORSE
  HORSE_SALE
  HORSE_BUY
}

enum HorseGender {
  HOPPE
  HINGST
  VALLACH
}

enum MessageType {
  TEXT
  IMAGE
  STABLE_LINK
  BOX_LINK
}

model horse_breeds {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String       @unique
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  horse_sales horse_sales[]
  horse_buys  horse_buys[]
}

model horse_disciplines {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String       @unique
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  horse_sales horse_sales[]
  horse_buys  horse_buys[]
}

model horse_sales {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  description       String
  price             Int
  age               Int
  gender            HorseGender
  breedId           String
  disciplineId      String
  size              HorseSize
  height            Int?               // Height in centimeters
  address           String?
  postalCode        String?
  postalPlace       String?
  latitude          Float?
  longitude         Float?
  countyId          String
  municipalityId    String
  contactName       String
  contactEmail      String?
  contactPhone      String?
  images            String[]           @default([])
  imageDescriptions String[]           @default([])
  userId            String
  viewCount         Int                @default(0)
  archived          Boolean            @default(false)
  deletedAt         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  breed             horse_breeds       @relation(fields: [breedId], references: [id])
  discipline        horse_disciplines  @relation(fields: [disciplineId], references: [id])
  counties          counties           @relation(fields: [countyId], references: [id])
  municipalities    municipalities     @relation(fields: [municipalityId], references: [id])
  profiles          profiles           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations     conversations[]
}

enum HorseSize {
  KATEGORI_4
  KATEGORI_3
  KATEGORI_2
  KATEGORI_1
  UNDER_160
  SIZE_160_170
  OVER_170
}

// Ads for "hest ønskes kjøpt" (horse wanted)
model horse_buys {
  id                String            @id @default(dbgenerated("gen_random_uuid()"))
  name              String            // Overskrift
  description       String            // Beskrivelse
  // Desired price range
  priceMin          Int?
  priceMax          Int?
  // Desired age range
  ageMin            Int?
  ageMax            Int?
  // Desired gender; null means all
  gender            HorseGender?
  // Desired height range (mankehøyde cm)
  heightMin         Int?
  heightMax         Int?
  // Desired breed/discipline; null means all
  breedId           String?
  disciplineId      String?

  // Contact info
  contactName       String
  contactEmail      String?
  contactPhone      String?

  // Media
  images            String[]          @default([])
  imageDescriptions String[]          @default([])

  // Ownership & meta
  userId            String
  viewCount         Int               @default(0)
  archived          Boolean           @default(false)
  deletedAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  breed             horse_breeds?     @relation(fields: [breedId], references: [id])
  discipline        horse_disciplines?@relation(fields: [disciplineId], references: [id])
  profiles          profiles          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([breedId])
  @@index([disciplineId])
  @@index([userId])
}
